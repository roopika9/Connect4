{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Board = function Board(_ref) {\n  var data = _ref.data,\n    setData = _ref.setData,\n    turn = _ref.turn,\n    setTurn = _ref.setTurn,\n    disabled = _ref.disabled,\n    setDisabled = _ref.setDisabled,\n    ai = _ref.ai,\n    setAi = _ref.setAi;\n  useEffect(function () {}, []);\n  var checkAvailableColumns = function checkAvailableColumns(board) {\n    var availableColumns = [];\n    for (var column = 0; column <= 6; column++) {\n      for (var row = 5; row >= 0; row--) {\n        if (board[row][column] == null) {\n          availableColumns.push(column);\n          break;\n        }\n      }\n    }\n    return availableColumns;\n  };\n  var getEmptyRow = function getEmptyRow(column, board) {\n    var row = 5;\n    while (row >= 0) {\n      if (board[row][column] == null) return row;\n      row = row - 1;\n    }\n  };\n  var placeDisc = function placeDisc(emptyRow, column, player) {\n    var dataCopy = _toConsumableArray(data);\n    dataCopy[emptyRow][column] = player;\n    setData(dataCopy);\n  };\n  var checkWin = function checkWin(board, player) {\n    for (var row = 0; row <= 5; row++) {\n      for (var column = 0; column <= 6; column++) {\n        if (column <= 3 && board[row][column] === player && board[row][column + 1] === player && board[row][column + 2] === player && board[row][column + 3] === player) {\n          return true;\n        }\n        if (row <= 2 && board[row][column] === player && board[row + 1][column] === player && board[row + 2][column] === player && board[row + 3][column] === player) {\n          return true;\n        }\n        if (row >= 3 && column <= 3 && board[row][column] === player && board[row - 1][column + 1] === player && board[row - 2][column + 2] === player && board[row - 3][column + 3] === player) {\n          return true;\n        }\n        if (row >= 3 && column >= 3 && board[row][column] === player && board[row - 1][column - 1] === player && board[row - 2][column - 2] === player && board[row - 3][column - 3] === player) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  var takeTurn = function takeTurn(column) {};\n  var restartGame = function restartGame() {};\n  var getWindowScore = function getWindowScore(window) {};\n  var evaluate = function evaluate(board) {};\n  var minimax = function minimax(board, depth, maximizingPlayer) {};\n  var aiTurn = function aiTurn() {};\n  var Disc = function Disc(_ref2) {\n    var value = _ref2.value,\n      columnIndex = _ref2.columnIndex,\n      disabled = _ref2.disabled,\n      onDiscPress = _ref2.onDiscPress;\n    var discStyle = styles.disc;\n    if (value == 1) {\n      discStyle = [styles.disc, {\n        backgroundColor: '#ccb002'\n      }];\n    } else if (value == 2) {\n      discStyle = [styles.disc, {\n        backgroundColor: '#b11d22'\n      }];\n    }\n    return _jsx(TouchableWithoutFeedback, {\n      disabled: disabled,\n      onPress: function onPress() {\n        return onDiscPress(columnIndex);\n      },\n      children: _jsx(View, {\n        style: discStyle\n      })\n    });\n  };\n  var renderItem = function renderItem(_ref3) {\n    var item = _ref3.item;\n    return _jsx(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      children: item.map(function (value, columnIndex) {\n        return _jsx(Disc, {\n          value: value,\n          columnIndex: columnIndex,\n          disabled: disabled,\n          onDiscPress: takeTurn\n        }, columnIndex);\n      })\n    });\n  };\n  return _jsxs(View, {\n    style: styles.boardView,\n    children: [_jsx(View, {\n      style: styles.board,\n      children: _jsx(FlatList, {\n        data: data,\n        extraData: data,\n        renderItem: renderItem,\n        keyExtractor: function keyExtractor(_, index) {\n          return index.toString();\n        }\n      })\n    }), _jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        marginTop: wp(6),\n        marginBottom: wp(6)\n      },\n      children: [_jsx(TouchableHighlight, {\n        underlayColor: \"transparent\",\n        onPress: function onPress() {\n          return restartGame();\n        },\n        children: _jsx(View, {\n          style: styles.button,\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \" Restart \"\n          })\n        })\n      }), _jsx(Text, {\n        style: styles.aiText,\n        children: \" AI: \"\n      }), _jsx(Switch, {\n        style: styles.switch,\n        value: ai,\n        trackColor: {\n          true: \"red\",\n          false: \"gray\"\n        },\n        thumbColor: ai ? \"blue\" : \"white\",\n        onValueChange: function onValueChange() {\n          setAi(!ai);\n          if (!ai) {\n            restartGame();\n            window.alert('AI enabled! Game restarted. Now AI will play as the opponent.');\n          } else {\n            restartGame();\n            window.alert('AI disabled! Game restarted. Now the human will play as the opponent.');\n          }\n        }\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  boardView: {\n    flex: 5,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  board: {\n    width: wp(90),\n    height: hp(38.6),\n    backgroundColor: \"#1b2f78\",\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n    flexWrap: 'wrap'\n  },\n  disc: {\n    width: wp(12),\n    height: hp(6),\n    borderRadius: wp(15),\n    backgroundColor: 'white',\n    margin: wp(0.4)\n  },\n  button: {\n    width: wp(25),\n    height: hp(5),\n    alignItems: \"center\",\n    justifyContent: 'center',\n    backgroundColor: \"#0164fe\",\n    borderRadius: wp(3),\n    marginTop: wp(7)\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: wp(5.2),\n    fontFamily: 'notoserif',\n    fontWeight: '300'\n  },\n  aiText: {\n    color: 'black',\n    fontSize: wp(8),\n    fontFamily: 'notoserif',\n    paddingTop: wp(5.8),\n    paddingLeft: wp(5),\n    marginLeft: wp(3)\n  },\n  switch: {\n    transform: [{\n      scaleX: 2\n    }, {\n      scaleY: 2\n    }],\n    marginLeft: wp(5),\n    marginTop: wp(6.7)\n  }\n});\nexport default Board;","map":{"version":3,"names":["React","useEffect","View","Text","FlatList","TouchableWithoutFeedback","TouchableHighlight","Switch","StyleSheet","widthPercentageToDP","wp","heightPercentageToDP","hp","jsx","_jsx","jsxs","_jsxs","Board","_ref","data","setData","turn","setTurn","disabled","setDisabled","ai","setAi","checkAvailableColumns","board","availableColumns","column","row","push","getEmptyRow","placeDisc","emptyRow","player","dataCopy","_toConsumableArray","checkWin","takeTurn","restartGame","getWindowScore","window","evaluate","minimax","depth","maximizingPlayer","aiTurn","Disc","_ref2","value","columnIndex","onDiscPress","discStyle","styles","disc","backgroundColor","onPress","children","style","renderItem","_ref3","item","flexDirection","map","boardView","extraData","keyExtractor","_","index","toString","marginTop","marginBottom","underlayColor","button","buttonText","aiText","switch","trackColor","true","false","thumbColor","onValueChange","alert","create","flex","alignItems","justifyContent","width","height","flexWrap","borderRadius","margin","color","fontSize","fontFamily","fontWeight","paddingTop","paddingLeft","marginLeft","transform","scaleX","scaleY"],"sources":["/usercode/connect4/components/Board.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { \n  View,\n  Text,\n  FlatList,\n  TouchableWithoutFeedback,\n  TouchableHighlight,\n  Switch,\n  StyleSheet\n} from 'react-native';\nimport { \n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp\n} from 'react-native-responsive-screen';\n\nconst Board = ({ data, setData, turn, setTurn, disabled, setDisabled, ai, setAi }) => {\n\n  /*\n    Props\n    data => 2D array of 6 rows and 7 columns representing the state of the Connect 4 game board\n    setData => Method to update the data prop\n    turn => Integer representing whose turn it is, i.e., player 1, player 2, or AI\n    setTurn => Method to update the turn prop\n    disabled => Boolean to enable or disable the Connect 4 game board. The board is disabled once the game is over\n    setDisabled => Method to update the disabled prop\n    ai => Boolean representing whether the AI is playing or not. If false, it means player 2 is playing\n    setAi => Method to update the ai prop\n  */\n\n  useEffect(() => {\n    // Write Task 11 code below this line\n  }, []);\n\n  /*\n    Parameters\n    board => 2D array of 6 rows and 7 columns representing the Connect 4 game board\n  */\n  const checkAvailableColumns = (board) => {\n    // Write Task 5 code below this line\n    let availableColumns = [];\n    for (let column = 0; column <= 6; column++) {\n      for (let row = 5; row >= 0; row--) {\n        if (board[row][column] == null) {\n          availableColumns.push(column);\n          break;\n        }\n      }\n    }\n    return availableColumns;\n  }\n\n  /*\n    Parameters\n    column => Integer between 0 and 6 (inclusive) representing the column index of the Connect 4 game board\n    board => 2d array of 6 rows and 7 columns representing the Connect 4 game board\n  */\n  const getEmptyRow = (column, board) => {\n    // Write Task 5 code below this line\n    let row = 5;\n    while (row >= 0) {\n      if (board[row][column] == null)\n        return row;\n      row = row - 1;\n    }\n  }\n\n  /*\n    Parameters\n    emptyRow => Integer representing row index having a value of null where the disc can be placed\n    column => Integer between 0 and 6 (inclusive) representing the column index of the Connect 4 game board\n    player => Integer representing 1 for player 1 and 2 for player 2 or AI\n  */\n  const placeDisc = (emptyRow, column, player) => {\n    // Write Task 5 code below this line\n    let dataCopy = [...data];\n    dataCopy[emptyRow][column] = player;\n    setData(dataCopy);\n  }\n\n  /*\n    Parameters\n    board => 2D array of 6 rows and 7 columns representing the Connect 4 game board.\n    player => Integer representing 1 for player 1 and 2 for player 2 or AI\n  */\n  const checkWin = (board, player) => {\n    // Write Task 6 code below this line\n    for (let row = 0; row <= 5; row++) {\n      for (let column = 0; column <= 6; column++) {\n        // horizontal win\n        if (column <= 3 && board[row][column] === player && board[row][column + 1] === player && board[row][column + 2] === player && board[row][column + 3] === player) {\n          return true;\n        }\n        // vertical win\n        if (row <= 2 && board[row][column] === player && board[row + 1][column] === player && board[row + 2][column] === player && board[row + 3][column] === player) {\n          return true;\n        }\n        // positive diagonals win\n        if (row >= 3 && column <= 3 && board[row][column] === player && board[row - 1][column + 1] === player && board[row - 2][column + 2] === player && board[row - 3][column + 3] === player) {\n          return true;\n        }\n        // negative diagonals win\n        if (row >= 3 && column >= 3 && board[row][column] === player && board[row - 1][column - 1] === player && board[row - 2][column - 2] === player && board[row - 3][column - 3] === player) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /*\n    Parameters\n    column => Integer between 0 and 6 (inclusive) representing the column index of the Connect 4 game board\n  */\n  const takeTurn = (column) => {\n    // Write Task 7 code below this line\n  }\n\n  const restartGame = () => {\n    // Write Task 8 code below this line\n  }\n\n  /*\n    Parameters\n    window => An array of length 4 whose indices can have one of the following values: 1, 2, and null\n  */\n  const getWindowScore = (window) => {\n    // Write Task 9 code below this line\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the Connect 4 game board\n  */\n  const evaluate = (board) => {\n    // Write Task 9 code below this line\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the Connect 4 game board\n    depth => Integer representing the recursion depth. Can have values 1 and greater than 1\n    maximizingPlayer => Boolean value representing whether the player is maximizing or not\n  */\n  const minimax = (board, depth, maximizingPlayer) => {\n    // Write Task 10 code below this line\n  }\n\n  const aiTurn = () => {\n    // Write Task 11 code below this line\n  }\n\n  const Disc = ({ value, columnIndex, disabled, onDiscPress }) => {\n    let discStyle = styles.disc;\n    if (value == 1) {\n        discStyle = [styles.disc, { backgroundColor: '#ccb002' }];\n    } else if (value == 2) {\n        discStyle = [styles.disc, { backgroundColor: '#b11d22' }];\n    }\n    return (\n        <TouchableWithoutFeedback disabled={disabled} onPress={() => onDiscPress(columnIndex)}>\n          <View style={discStyle}></View>\n        </TouchableWithoutFeedback>\n    );\n  };\n\n  const renderItem = ({ item }) => (\n    <View style={{ flexDirection: 'row' }}>\n        {item.map((value, columnIndex) => (\n            <Disc key={columnIndex} value={value} columnIndex={columnIndex} disabled={disabled} onDiscPress={takeTurn} />\n        ))}\n    </View>\n  );\n\n  // Write Task 3 code below this line\n\n  return (\n    <View style={styles.boardView}>\n      <View style={styles.board}>\n        <FlatList\n          data={data}\n          extraData={data}\n          renderItem={renderItem}\n          keyExtractor={(_, index) => index.toString()}\n        />\n      </View>\n      <View style={{flexDirection: 'row', marginTop: wp(6), marginBottom: wp(6)}}>\n        <TouchableHighlight\n          underlayColor=\"transparent\"\n          onPress={() => restartGame()}\n        >\n          <View style={styles.button}>\n              <Text style={styles.buttonText}> Restart </Text>\n          </View>\n        </TouchableHighlight>\n        <Text style={styles.aiText}> AI: </Text>\n        <Switch\n          style={styles.switch}\n          value={ ai }\n          trackColor={{ true: \"red\", false: \"gray\" }}\n          thumbColor={ ai ? \"blue\" : \"white\" }\n          onValueChange={() => {\n            setAi(!ai)\n            if (!ai) {\n              restartGame();\n              window.alert('AI enabled! Game restarted. Now AI will play as the opponent.');\n            } \n            else {\n              restartGame();\n              window.alert('AI disabled! Game restarted. Now the human will play as the opponent.');\n            }\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  boardView: {\n    flex: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  board: {\n    width: wp(90),\n    height: hp(38.6),\n    backgroundColor: \"#1b2f78\",\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n    flexWrap: 'wrap'\n  },\n  disc: {\n    width: wp(12),\n    height: hp(6),\n    borderRadius: wp(15),\n    backgroundColor: 'white',\n    margin: wp(0.4)\n  },\n  button: {\n    width: wp(25),\n    height: hp(5),\n    alignItems: \"center\",\n    justifyContent: 'center',\n    backgroundColor: \"#0164fe\",\n    borderRadius: wp(3),\n    marginTop: wp(7)\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: wp(5.2),\n    fontFamily: 'notoserif',\n    fontWeight: '300',\n  },\n  aiText: {\n    color: 'black',\n    fontSize: wp(8),\n    fontFamily: 'notoserif',\n    paddingTop: wp(5.8),\n    paddingLeft: wp(5),\n    marginLeft: wp(3),\n  },\n  switch: {\n    transform: [{ scaleX: 2 }, { scaleY: 2 }],\n    marginLeft: wp(5),\n    marginTop: wp(6.7)\n  },\n});\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}